res_pa=gather(res_pa,"method","accuracy",2:5)
res_pa$method=as.factor(revalue(res_pa$method,c("pa_A"="A","pa_B"="B","pa_C"="C","pa_D"="D")))
res_pa$pa=as.factor("pa")
res_abu=res[,c(1,6:9)]
res_abu=gather(res_abu,"method","accuracy",2:5)
res_abu$method=as.factor(revalue(res_abu$method,c("abu_A"="A","abu_B"="B","abu_C"="C","abu_D"="D")))
res_abu$pa=as.factor("abu")
res2=rbind(res_pa,res_abu)
str(res2)
ggplot(res2,aes(x=method, y=accuracy))+geom_boxplot()+facet_grid(.~pa)
m0=lm(accuracy~method*pa,data=res2)
summary(m0)
drop1(m0,test="F")
E1=rstandard(m0)
F1=fitted(m0)
par(mfrow=c(2,2), mar=c(5,5,2,2))
plot(x=F1,y=E1,xlab="fitted",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~method,xlab="method",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~pa,xlab="pa",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~species,xlab="species",ylab="residuals",data=res2)
abline(h=0,lty=2)
E1=rstandard(m0)
F1=fitted(m0)
par(mfrow=c(2,2), mar=c(5,5,2,2))
plot(x=F1,y=E1,xlab="fitted",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~method,xlab="method",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~pa,xlab="pa",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~species,xlab="species",ylab="residuals",data=res2)
abline(h=0,lty=2)
par(mfrow=c(1,3), mar=c(5,5,2,2))
plot(x=F1,y=E1,xlab="fitted",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~method,xlab="method",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~pa,xlab="pa",ylab="residuals",data=res2)
abline(h=0,lty=2)
par(mfrow=c(2,2), mar=c(5,5,2,2))
plot(x=F1,y=E1,xlab="fitted",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~method,xlab="method",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~pa,xlab="pa",ylab="residuals",data=res2)
abline(h=0,lty=2)
par(mfrow=c(1,1), mar=c(5,5,2,2))
boxplot(E1~species,xlab="species",ylab="residuals",data=res2)
abline(h=0,lty=2)
par(mfrow=c(1,1), mar=c(5,5,2,2))
boxplot(E1~species,xlab="species",ylab="residuals",data=res2)
abline(h=0,lty=2)
summary(A2)
A1=gls(accuracy~method*pa,method="REML",data=res2)
A2=lme(accuracy~method*pa,data=res2,random=~1|species,method="REML")
anova(A1,A2)
summary(A2)
anova(A2)
E1=resid(A2, type="normalized")
F1=fitted(A2)
par(mfrow=c(2,2), mar=c(5,5,2,2))
plot(x=F1,y=E1,xlab="fitted",ylab="residuals")
abline(h=0,lty=2)
boxplot(E1~method,xlab="method",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~pa,xlab="pa",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~species,xlab="species",ylab="residuals",data=res2)
abline(h=0,lty=2)
E1=resid(A2, type="normalized")
F1=fitted(A2)
par(mfrow=c(2,2), mar=c(5,5,2,2))
plot(x=F1,y=E1,xlab="fitted",ylab="residuals")
abline(h=0,lty=2)
boxplot(E1~method,xlab="method",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~pa,xlab="pa",ylab="residuals",data=res2)
abline(h=0,lty=2)
par(mfrow=c(1,1), mar=c(5,5,2,2))
boxplot(E1~species,xlab="species",ylab="residuals",data=res2)
abline(h=0,lty=2)
#muita vaihtoehtoja random-rakenteen testaamiseksi:
#A3=lme(accuracy~method*pa,data=res2,random=~1+method|species,method="REML")
A4=lme(accuracy~method*pa,data=res2,random=~1+pa|species,method="REML")
E1=resid(A4, type="normalized")
F1=fitted(A4)
par(mfrow=c(2,2), mar=c(5,5,2,2))
plot(x=F1,y=E1,xlab="fitted",ylab="residuals")
abline(h=0,lty=2)
boxplot(E1~method,xlab="method",ylab="residuals",data=res2)
abline(h=0,lty=2)
boxplot(E1~pa,xlab="pa",ylab="residuals",data=res2)
abline(h=0,lty=2)
par(mfrow=c(1,1), mar=c(5,5,2,2))
boxplot(E1~species,xlab="species",ylab="residuals",data=res2)
abline(h=0,lty=2)
anova(A2,A4)
A2full=lme(accuracy~method*pa,data=res2,random=~1|species,method="ML")
A2.a=lme(accuracy~method+pa,data=res2,random=~1|species,method="ML")
A2.b=lme(accuracy~method,data=res2,random=~1|species,method="ML")
A2.c=lme(accuracy~pa,data=res2,random=~1|species,method="ML")
anova(A2full,A2.a)
AIC(A2full,A2.a,A2.b,A2.c)
A2full=lme(accuracy~method*pa,data=res2,random=~1|species,method="REML")
summary(A2full)
plot(A2full)
qqnorm(A2full)
qqnorm(A2full,~ranef(.),col=1)
intervals(A2full)
# Piirretään kuvaaja, Fig1
#määritetään kuvalle raamit ja nimi
Line=c(-1,1)
Line2=c(-1,1)
Line3=c(0,0)
Line=cbind(Line,Line2)
Line=cbind(Line,Line3)
Line=as.data.frame(Line)
#pdf("Fig1.pdf")
#jpeg("Fig1abcdef.jpeg")
#png("Fig1abcdef.png")
#määrittää 3x3 matriisin johon kuvat piirretään
layout(matrix(c(1,2,7,3,4,7,5,6,7), 3, 3, byrow = TRUE))
# a)
plot(pa_B~pa_A,data=res,xlim=c(-1,1),
ylim=c(-1,1),cex.axis=0.8,xlab="Prediction accuracy (A)",
ylab="Prediction accuracy (B)")
lines(Line$Line,Line$Line2,lty="dashed")
lines(Line$Line,Line$Line3,col="grey",lty="dashed")
lines(Line$Line3,Line$Line,col="grey",lty="dashed")
text(-0.5,0.8,"a) Distribution",cex=0.8)
# b)
plot(abu_B~abu_A,data=res,xlim=c(-1,1),
ylim=c(-1,1),cex.axis=0.8,xlab="Prediction accuracy (A)",
ylab="Prediction accuracy (B)")
lines(Line$Line,Line$Line2,lty="dashed")
lines(Line$Line,Line$Line3,col="grey",lty="dashed")
lines(Line$Line3,Line$Line,col="grey",lty="dashed")
text(-0.5,0.8,"b) Abundance",cex=0.8)
# c)
plot(pa_D~pa_C,data=res,xlim=c(-1,1),
ylim=c(-1,1),cex.axis=0.8,xlab="Prediction accuracy (C)",
ylab="Prediction accuracy (D)")
lines(Line$Line,Line$Line2,lty="dashed")
lines(Line$Line,Line$Line3,col="grey",lty="dashed")
lines(Line$Line3,Line$Line,col="grey",lty="dashed")
text(-0.5,0.8,"c) Distribution, 2 km",cex=0.8)
# d)
plot(abu_D~abu_C,data=res,xlim=c(-1,1),
ylim=c(-1,1),cex.axis=0.8,xlab="Prediction accuracy (C)",
ylab="Prediction accuracy (D)")
lines(Line$Line,Line$Line2,lty="dashed")
lines(Line$Line,Line$Line3,col="grey",lty="dashed")
lines(Line$Line3,Line$Line,col="grey",lty="dashed")
text(-0.5,0.8,"d) Abundance, 2 km",cex=0.8)
#dev.off()
# Piirretään kuvaaja, Fig1
#määritetään kuvalle raamit ja nimi
Line=c(-1,1)
Line2=c(-1,1)
Line3=c(0,0)
Line=cbind(Line,Line2)
Line=cbind(Line,Line3)
Line=as.data.frame(Line)
#pdf("Fig1.pdf")
#jpeg("Fig1abcdef.jpeg")
#png("Fig1abcdef.png")
#määrittää 3x3 matriisin johon kuvat piirretään
layout(matrix(c(1,2,7,3,4,7,5,6,7), 3, 3, byrow = TRUE))
# a)
plot(pa_B~pa_A,data=res,xlim=c(-1,1),
ylim=c(-1,1),cex.axis=0.8,xlab="Prediction accuracy (A)",
ylab="Prediction accuracy (B)")
lines(Line$Line,Line$Line2,lty="dashed")
lines(Line$Line,Line$Line3,col="grey",lty="dashed")
lines(Line$Line3,Line$Line,col="grey",lty="dashed")
text(-0.5,0.8,"a) Distribution",cex=0.8)
# b)
plot(abu_B~abu_A,data=res,xlim=c(-1,1),
ylim=c(-1,1),cex.axis=0.8,xlab="Prediction accuracy (A)",
ylab="Prediction accuracy (B)")
lines(Line$Line,Line$Line2,lty="dashed")
lines(Line$Line,Line$Line3,col="grey",lty="dashed")
lines(Line$Line3,Line$Line,col="grey",lty="dashed")
text(-0.5,0.8,"b) Abundance",cex=0.8)
# c)
plot(pa_D~pa_C,data=res,xlim=c(-1,1),
ylim=c(-1,1),cex.axis=0.8,xlab="Prediction accuracy (C)",
ylab="Prediction accuracy (D)")
lines(Line$Line,Line$Line2,lty="dashed")
lines(Line$Line,Line$Line3,col="grey",lty="dashed")
lines(Line$Line3,Line$Line,col="grey",lty="dashed")
text(-0.5,0.8,"c) Distribution, 2 km",cex=0.8)
# d)
plot(abu_D~abu_C,data=res,xlim=c(-1,1),
ylim=c(-1,1),cex.axis=0.8,xlab="Prediction accuracy (C)",
ylab="Prediction accuracy (D)")
lines(Line$Line,Line$Line2,lty="dashed")
lines(Line$Line,Line$Line3,col="grey",lty="dashed")
lines(Line$Line3,Line$Line,col="grey",lty="dashed")
text(-0.5,0.8,"d) Abundance, 2 km",cex=0.8)
#dev.off()
A2full=lme(accuracy~method*pa,data=res2,random=~1|species,method="REML")
summary(A2full)
plot(A2full)
qqnorm(A2full)
qqnorm(A2full,~ranef(.),col=1)
intervals(A2full)
anova(A2full)
plot(A2full)
qqnorm(A2full)
qqnorm(A2full,~ranef(.),col=1)
intervals(A2full)
boplot(accuracy~method*pa,data=res2)
boxplot(accuracy~method*pa,data=res2)
boxplot(accuracy~pa*method,data=res2)
library(ggplot2)
library(tidyr)
set.seed(1234)
x<- sample(c("exp", "con"), 100, replace = TRUE)
yT1<-rnorm(100)
yT2<-rnorm(100)
df1 <- as.data.frame(cbind(x,yT1,yT2))
View(df1)
df2 <- gather(df1, "grp", "val", yT1, yT2)
View(df2)
df2$val <- as.numeric(df2$val)
ggplot(df2, aes(x = grp, y = val, interaction = x, colour = grp)) +
geom_boxplot()
ggplot(res2, aes(x = method, y = accuracy, interaction = pa, colour = method)) +
geom_boxplot()
ggplot(res2, aes(x = method, y = accuracy, interaction = pa, colour = method)) + geom_boxplot()
boxplot(accuracy~pa*method,data=res2)
ggplot(res2, aes(x = method, y = accuracy, interaction = pa, colour = method)) + geom_boxplot()
ggplot(res2, aes(x = method, y = accuracy, interaction = pa, colour = method)) + geom_boxplot() + labels(pa)
ggplot(res2, aes(x = method, y = accuracy, interaction = pa, colour = pa)) + geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
#Malli:
#XFormula = ~ JunJul + DJF + AprMay+
#  Year+Urb + Br + Co + Op + Ma + We + Effort*Method
#for (thin in c(1)){
#  samples = 1000
#  nChains = 4
#  for (modeltype in 1:2){
#    for (model in 1:2){
#      set.seed(1)
#      sel = if(model==1){sel1} else {sel2}
#      m = Hmsc(Y=if(modeltype==1){1*(Y[sel,]>0)} else {Yabu[sel,]},
#               XData = XData[sel,],  XFormula=XFormula,
#               distr=if(modeltype==1){"probit"} else {"normal"},
#               studyDesign=studyDesign[sel,])
#
#      ptm = proc.time()
#      m = sampleMcmc(m, samples = samples, thin=thin,
#                     transient = ceiling(0.5*samples*thin),
#                     nChains = nChains, nParallel = nChains)
knitr::include_graphics('./ABCD_erikseen.png')
getwd()
localDir = "."
PredictionDir = file.path(localDir, "data")
paketit<-c("readr","tidyr","dplyr","plyr","magrittr","purrr","data.table","plotrix","jtools","sp","GISTools","rgdal","sf","spatialEco","ggplot2","ggrepel","psych")
lapply(paketit,library,character.only=T)
#model 1: data until 1999; model 2: full data
#mpred1: posterior mean based on model 1; mpred2: posterior mean based on model 2
samples = 1000
thin = 10
nChains = 4
modeltype = 1 #1 on pa-aineistolle
filename = file.path(PredictionDir, paste("predictions_",c("pa","abundance")[modeltype],
"_chains_",as.character(nChains),"_thin_", as.character(thin),"_samples_", as.character(samples),
".Rdata",sep = ""))
load(filename) #mpred1, mpred2, Y, studyDesign
routes=levels(studyDesign$Route)
nr=length(routes)
years=levels(studyDesign$Year)
dim(mpred1)
ns=dim(mpred1)[2]
dim(mpred2)
dim(Y)
dim(studyDesign)
period1=(studyDesign$Year=="Year_1996" | studyDesign$Year=="Year_1997" | studyDesign$Year=="Year_1998" | studyDesign$Year=="Year_1999")
period2=(studyDesign$Year=="Year_2013" | studyDesign$Year=="Year_2014" | studyDesign$Year=="Year_2015" | studyDesign$Year=="Year_2016")
pm1p1=mpred1[period1,]
pm2p1=mpred2[period1,]
pm1p2=mpred1[period2,] #pm1p2 = predictions by model 1 to period 2
pm2p2=mpred2[period2,]
y1=Y[period1,]
y2=Y[period2,]
sd1 = studyDesign[period1,]
sd2 = studyDesign[period2,]
visits1 = rep(NA,nr)
visits2 = rep(NA,nr)
for (i in 1:nr){
visits1[i] = sum(sd1$Route==routes[i])
visits2[i] = sum(sd2$Route==routes[i])
}
# COMPUTE MEASURES A AND B
selroutes = routes[which(visits2>=2)]  #periodi 2, joten vesilintujen NA:t eivät vaikuta näissä laskuissa
nsr = length(selroutes)
Ap1=matrix(NA,nrow = nsr,ncol = ns)
Ap2=matrix(NA,nrow = nsr,ncol = ns)
Ay=matrix(NA,nrow = nsr,ncol = ns)
for (i in 1:nsr){
take = which(sd2$Route == selroutes[i])
Ap1[i,] = colMeans(pm1p2[take,])
Ap2[i,] = colMeans(pm2p2[take,])
Ay[i,] = colMeans(y2[take,])
}
A = rep(NA,ns)
B = rep(NA,ns)
for (i in 1:ns){
A[i] = cor(Ap2[,i],Ay[,i])
B[i] = cor(Ap1[,i],Ay[,i])
}
plot(A,B,xlim=c(-1,1), ylim=c(-1,1)) + abline(0,1)+ abline(h=0)+ abline(v=0)
# COMPUTE MEASURES C AND D
selroutes = routes[which(visits1>=2 & visits2>=2)]
nsr = length(selroutes)
Ap1=matrix(NA,nrow = nsr,ncol = ns)
Ap2=matrix(NA,nrow = nsr,ncol = ns)
Ay=matrix(NA,nrow = nsr,ncol = ns)
for (i in 1:nsr){
take1 = which(sd1$Route == selroutes[i])
take2 = which(sd2$Route == selroutes[i])
Ap1[i,] = colMeans(pm1p2[take2,])-colMeans(pm1p1[take1,]) #ennusteisiin ei tule NA:ta mutta seuraavissa laskuissa havaintojen NA eliminoi tämän ongelman
Ap2[i,] = colMeans(pm2p2[take2,])-colMeans(pm2p1[take1,])
Ay[i,] = colMeans(y2[take2,])- colMeans(y1[take1,])   #Suomen vesilintujen NA:t säilyvät
}
C = rep(NA,ns)
D = rep(NA,ns)
for (i in 1:ns){
C[i] = cor(Ap2[,i],Ay[,i], use="na.or.complete")  #NA:t eivät estä korrelaation laskemista koko lajille
D[i] = cor(Ap1[,i],Ay[,i], use="na.or.complete")
}
plot(C,D,xlim=c(-1,1), ylim=c(-1,1)) + abline(0,1)+ abline(h=0)+ abline(v=0)
pred=Ap1[,21]
obs=Ay[,21]
laji=as.data.frame(cbind(pred,obs))
#tarkistus
cor(pred,obs, use="na.or.complete")
#kuvaaja
ggplot(laji, aes(x=pred,y=obs))+ geom_point()+ xlim(-1,1)+ylim(-1,1)+ geom_abline(intercept = 0, slope =1) + geom_hline(yintercept=0) + geom_vline(xintercept = 0) +ggtitle("Viherpeippo")
#entäpä tikli?
pred=Ap1[,20]
obs=Ay[,20]
laji=as.data.frame(cbind(pred,obs))
#tarkistus
cor(pred,obs, use="na.or.complete")
#kuvaaja
ggplot(laji, aes(x=pred,y=obs))+ geom_point()+ xlim(-1,1)+ylim(-1,1)+ geom_abline(intercept = 0, slope =1) + geom_hline(yintercept=0) + geom_vline(xintercept = 0) +ggtitle("Tikli")
P_D = rep(NA,ns)
for (i in 1:ns){
P_D[i] = pairwiseCount(Ap1[,i],Ay[,i])
}
summary(P_D)
sort(P_D)
#create a table
meres=c(mean(A,na.rm = TRUE),mean(B,na.rm = TRUE),mean(C,na.rm = TRUE),mean(D,na.rm = TRUE))
names(meres)=c("A","B","C","D")
meres
#write.csv(meres,file="pa_species_specific_route_level.csv")
#save results as datatable for further analysis
species=colnames(Y)
pa_results=data.frame(species,A,B,C,D)
setnames(pa_results,c("A","B","C","D"),c("pa_A","pa_B","pa_C","pa_D"))
write.csv(pa_results, "pa_results.csv",row.names = F)
pa_results
#kannanmuutostrendien tarkastelu, lasketaan kaikilta linjoilta ennustetut ja todelliset kannanmuutokset
Ap1<-as.data.frame(Ap1)
Ap2<-as.data.frame(Ap2)
Ay<-as.data.frame(Ay)
#aineisto, jossa kullekin lajille laskettu kaikilta linjoilta ennustettu ja todellinen muutoksen keskiarvo (EI siis korrelaatio
# ennusteiden ja oikeiden muutosten välillä kuten aiemmin on laskettu)
kat=colnames(Y)
kat=as.data.frame(kat)
kat$Ap1k=colMeans(Ap1,na.rm = T)
kat$Ap2k<-colMeans(Ap2,na.rm = T)
kat$Ayk<-colMeans(Ay,na.rm = T)
ggplot(kat, aes(x=Ap2k, y=Ayk))+ geom_point()+
geom_hline(yintercept = 0, color = "black")+
geom_vline(xintercept = 0, color = "black")+
xlab("Mean predicted change, C")+
ylab("Mean observed change")+
geom_abline(intercept = 0, slope = 1, color="red",linetype="dashed", size=1.5)+
geom_text(aes(label=kat),hjust=0, vjust=0) + geom_smooth(method=lm,se=F)
ggplot(kat, aes(x=Ap1k, y=Ayk))+
geom_point()+ geom_hline(yintercept = 0, color = "black")+
geom_vline(xintercept = 0, color = "black")+
xlab("Mean predicted change, D")+
ylab("Mean observed change")+
geom_abline(intercept = 0, slope = 1, color="red",linetype="dashed", size=1.5)+
geom_text(aes(label=kat),hjust=0, vjust=0)+  geom_smooth(method=lm,se=F)
#tallennetaan tarvittaessa
write.csv(kat,"mean_observed_predicted_changes_pa.csv",row.names = F)
modeltype = 2 #2 on abu-aineistolle
filename = file.path(PredictionDir, paste("predictions_",c("pa","abundance")[modeltype],                                    "_chains_",as.character(nChains),"_thin_", as.character(thin),"_samples_", as.character(samples),".Rdata",sep = ""))
load(filename) #mpred1, mpred2, Y, studyDesign
routes=levels(studyDesign$Route)
nr=length(routes)
years=levels(studyDesign$Year)
dim(mpred1)
ns=dim(mpred1)[2]
dim(mpred2)
dim(Y)
dim(studyDesign)
pm1p1=mpred1[period1,]
pm2p1=mpred2[period1,]
pm1p2=mpred1[period2,] #pm1p2 = predictions by model 1 to period 2
pm2p2=mpred2[period2,]
y1=Y[period1,]
y2=Y[period2,]
sd1 = studyDesign[period1,]
sd2 = studyDesign[period2,]
visits1 = rep(NA,nr)
visits2 = rep(NA,nr)
for (i in 1:nr){
visits1[i] = sum(sd1$Route==routes[i])
visits2[i] = sum(sd2$Route==routes[i])
}
# COMPUTE MEASURES A AND B
selroutes = routes[which(visits2>=2)]
nsr = length(selroutes)
Ap1=matrix(NA,nrow = nsr,ncol = ns)
Ap2=matrix(NA,nrow = nsr,ncol = ns)
Ay=matrix(NA,nrow = nsr,ncol = ns)
for (j in 1:ns) {
for (i in 1:nsr){
take = which(sd2$Route == selroutes[i] & y2[,j]>-1)
Ap1[i,j] = mean(pm1p2[take,j])
Ap2[i,j] = mean(pm2p2[take,j])
Ay[i,j] = mean(y2[take,j],na.rm=T)
}}
A = rep(NA,ns)
B = rep(NA,ns)
for (i in 1:ns){
A[i] = cor(Ap2[,i],Ay[,i],use="na.or.complete")   #lisäsin tähän määreen
B[i] = cor(Ap1[,i],Ay[,i],use="na.or.complete")
}
plot(A,B,xlim=c(-1,1), ylim=c(-1,1)) + abline(0,1)+ abline(h=0)+ abline(v=0)
# COMPUTE MEASURES C AND D
selroutes = routes[which(visits1>=2 & visits2>=2)]
nsr = length(selroutes)
Ap1=matrix(NA,nrow = nsr,ncol = ns)
Ap2=matrix(NA,nrow = nsr,ncol = ns)
Ay=matrix(NA,nrow = nsr,ncol = ns)
for (j in 1:ns){
for (i in 1:nsr){
take1 = which(sd1$Route == selroutes[i] & y1[,j]>-1)
take2 = which(sd2$Route == selroutes[i]& y2[,j]>-1)
Ap1[i,j] = mean(pm1p2[take2,j])-mean(pm1p1[take1,j]) #ka laskettava vain vuosilta, jolloin lajia on havaittu
Ap2[i,j] = mean(pm2p2[take2,j])-mean(pm2p1[take1,j]) #riittää, että on edes kerran pystytty laskemaan lajia
Ay[i,j] = mean(y2[take2,j],na.rm=T)- mean(y1[take1,j],na.rm=T) #NA:t eivät saa estää keskiarvon laskemista koko lajille.
}}
C = rep(NA,ns)
D = rep(NA,ns)
for (i in 1:ns){
C[i] = cor(Ap2[,i],Ay[,i],use="na.or.complete")    #lisäsin tähän määreen
D[i] = cor(Ap1[,i],Ay[,i],use="na.or.complete")
}
plot(C,D,xlim=c(-1,1), ylim=c(-1,1)) + abline(0,1)+ abline(h=0)+ abline(v=0)
meres=c(mean(A,na.rm = TRUE),mean(B,na.rm = TRUE),mean(C,na.rm = TRUE),mean(D,na.rm = TRUE))
names(meres)=c("A","B","C","D")
meres
#save as datatable
species=colnames(Y)
abu_results=data.frame(species,A,B,C,D)
setnames(abu_results,c("A","B","C","D"),c("abu_A","abu_B","abu_C","abu_D"))
write.csv(abu_results, "abu_results.csv",row.names = F)
#combine data frames
res=inner_join(pa_results,abu_results,by="species")
#save as csv for further analysis
write.csv(res,"results.csv",row.names = F)
abu_results
pred=Ap1[,21]
obs=Ay[,21]
laji=as.data.frame(cbind(pred,obs))
#tarkistus
cor(pred,obs, use="na.or.complete")
#kuvaaja
ggplot(laji, aes(x=pred,y=obs))+ geom_point()+ xlim(-2,2)+ylim(-2,2)+ geom_abline(intercept = 0, slope =1) + geom_hline(yintercept=0) + geom_vline(xintercept = 0) +ggtitle("Viherpeippo")
#entäpä pohjansirkku?
pred=Ap1[,40]
obs=Ay[,40]
laji=as.data.frame(cbind(pred,obs))
#tarkistus
cor(pred,obs, use="na.or.complete")
#kuvaaja
ggplot(laji, aes(x=pred,y=obs))+ geom_point()+ xlim(-2,2)+ylim(-2,2)+ geom_abline(intercept = 0, slope =1) + geom_hline(yintercept=0) + geom_vline(xintercept = 0) +ggtitle("Pohjansirkku")
P_D = rep(NA,ns)
for (i in 1:ns){
P_D[i] = pairwiseCount(Ap1[,i],Ay[,i])
}
summary(P_D)
sort(P_D)
res=cbind(res,P_D)
View(res)
#save as csv for further analysis
write.csv(res,"results.csv",row.names = F)
knitr::opts_chunk$set(echo = TRUE)
packages<-c("readr","tidyr","dplyr","plyr","magrittr","purrr","data.table","plotrix","jtools","ggplot2","lme4","nlme")
lapply(packages,library,character.only=T)
getwd()
res<-read.csv("results.csv",header=T,sep=",")
str(res)
res$abu_Dx=res$abu_D
str(res)
res$abu_Dx[res$P_D<5]=NA
View(res)
res$abu_D[res$P_D<5]=NA
res3=res
